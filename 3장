면접관이 평가하는 요소

기술적 설계 능력: 효과적인 시스템 설계를 할 수 있는가?
협업 및 문제 해결 능력: 동료와 협력하며 모호한 문제를 해결할 수 있는가?
압박 속에서의 대응력: 한정된 시간 내에 논리적인 결론을 도출할 수 있는가?
질문하는 능력: 문제를 명확히 하기 위해 적절한 질문을 던지는가?

면접에서 피해야 할 실수

과도한 엔지니어링 (Over-engineering): 실용성보다 설계의 완벽성만을 추구하는 것은 오히려 역효과
융통성 부족: 다양한 접근 방식을 고려하지 않고 한 가지 방법만 고집하는 태도는 좋지 않음
고집스러움: 피드백을 무시하고 자신의 의견만 주장하는 것은 부정적인 평가를 받을 수 있음

1단계 - 문제 이해 및 설계 범위 정의
빠른 답변이 아닌, 요구 사항을 명확히 이해하고 적절한 질문을 던지는 능력이 중요

질문을 통해 문제 정의하기
어떤 기능을 구현해야 하는가?
예상 사용자 수 및 성장 속도는?
3개월, 6개월, 1년 후 예상 트래픽 규모는?
기존 시스템(기술 스택)을 활용할 수 있는가?

예제: 뉴스 피드 시스템 설계 질문

모바일 앱인가, 웹 앱인가, 둘 다인가?
뉴스 피드의 정렬 기준은? (시간순 vs 맞춤형 알고리즘)
한 사용자가 가질 수 있는 친구 수는? (예: 5000명)
트래픽 볼륨은? (예: 1천만 DAU)
피드에 이미지, 동영상 포함이 가능한가?

2단계 - 고수준 설계 제안 및 합의 도출
이 단계에서는 핵심 컴포넌트들을 정의하고 면접관과 협업하며 설계를 발전

고수준 설계 단계
기본적인 설계 개요(blueprint) 작성 및 피드백 받기
주요 컴포넌트 다이어그램(Box Diagram) 작성

클라이언트 (웹/모바일)
API 서버
데이터베이스 / 캐시
CDN / 메시지 큐 등
규모 계산(Back-of-the-envelope estimation) 진행
시스템이 트래픽 요구 사항을 충족하는지 검토
면접관과 상의 후 필요하면 수행
구체적인 사용 사례 검토
설계 검증 및 엣지 케이스 발견

예제: 뉴스 피드 시스템 설계 (고수준 설계)
피드 게시(Feed Publishing): 사용자가 게시물을 올리면, 데이터가 캐시/데이터베이스에 저장되고 친구들의 뉴스 피드에 반영
뉴스 피드 생성(News Feed Building): 친구들의 게시물을 시간순(Reverse Chronological Order) 으로 정렬하여 제공

